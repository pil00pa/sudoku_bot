from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageCantBeDeleted, ChatNotFound
import sqlite3
from string import ascii_letters
from generator_sudoku import generator_sudoku, sudoku_solver
from matrix_filling import sudoku_drawer
import config

try:
    bot = Bot(config.TOKEN)
    dp = Dispatcher(bot)


    @dp.message_handler(commands=['db'])
    async def db_sender(message):
        if message.from_user.id == 484620905:
            with open('users.db', 'rb') as file:
                await bot.send_document(message.chat.id, ('users.db', file))


    @dp.message_handler(commands=['start_mailing'])
    async def add_sender(message):
        if message.from_user.id == 484620905:
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("SELECT id FROM id_n_dif_n_wins")
            data = cursor.fetchall()
            connect.close()
            for user_id in data:
                add_photo = open('uebak_image.jpg', 'rb')
                try:
                    await bot.send_photo(user_id[0], photo=add_photo, caption=
                    """*–ù—É–∂–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ, —é—Ç—É–±–µ,–≤–∫, —Ñ–µ–π—Å–±—É–∫–µ, –≤–∞—Ç—Å–∞–ø, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö, –Ω–æ –Ω–µ—Ç—É —Å–∏–º–∫–∞—Ä—Ç—ã?üßê*
–ü–æ–∫—É–ø–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã [–∑–¥–µ—Å—å](https://t.me/ActVisionbot)üëáüî•

–õ—É—á—à–∏–π –±–æ—Ç –ø–æ –ø—Ä–∏—ë–º—É –°–ú–° - @ActVisionbot

–£ –Ω–∞—Å —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã ‚úÖ
–ë–æ–ª–µ–µ 20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ üõçÔ∏è
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QIWI –∏ –Æ–º–∞–Ω–∏  üè¶

[–ü–µ—Ä–µ—Ö–æ–¥–∏](https://t.me/ActVisionbot) *–∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –º—ã –ª—É—á—à–∏–µ!*""", parse_mode='Markdown')
                except:
                    pass
                add_photo.close()


    @dp.message_handler(commands=['start'])
    async def starter(message):
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT id FROM id_n_dif_n_wins WHERE id = {message.chat.id}")
        data = cursor.fetchone()
        if data is None:
            cursor.execute("INSERT INTO id_n_dif_n_wins VALUES(?, ?, ?);", [message.chat.id, 2, 0])
        connect.commit()
        connect.close()

        markup = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("‚úèÔ∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='NewGame'))
        await message.answer("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É - /game\n\n"
                             "–í—Å–µ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω–∏—Ü–µ–π!\n\n"
                             "–í–≤–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - *G4 8*\n"
                             "*G* - —Å—Ç–æ–ª–±–∏–∫, *4* - —Ä—è–¥–æ—á–µ–∫, *8* - —Ü–∏—Ñ—Ä–∞\n\n"
                             "–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—É - *G4 0*\n\n"
                             "–ü–æ–º–µ–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å - /change\_level\n"
                             "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ - /answer\n"
                             "–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ - /clear\n"
                             "–ü—Ä–∞–≤–∏–ª–∞ —Å—É–¥–æ–∫—É - /rules\n\n"
                             "*üì©–ö—É–ø–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç -* @ActVisionbot\n"
                             "*ü§ñ–ù–∞–∫—Ä—É—Ç–∫–∞ –±–æ—Çü§ñ* - @likeasubscriberboss\_bot",
                             parse_mode='Markdown', reply_markup=markup)


    @dp.message_handler(commands=['rules'])
    async def helper(message):
        await message.answer("–û—Ç –∏–≥—Ä–æ–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 9 —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–π "
                             "—Å—Ç—Ä–æ–∫–µ, –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ –∏ –≤ –∫–∞–∂–¥–æ–º –∏–∑ 9 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ 3√ó3 –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å –±—ã "
                             "–µ–¥–∏–Ω–æ–∂–¥—ã.")


    @dp.message_handler(commands=['change_level'])
    async def level_changer(message):
        level_1 = InlineKeyboardButton("1", callback_data='Level_1')
        level_2 = InlineKeyboardButton("2", callback_data='Level_2')
        level_3 = InlineKeyboardButton("3", callback_data='Level_3')
        level_4 = InlineKeyboardButton("4", callback_data='Level_4')
        level_5 = InlineKeyboardButton("5", callback_data='Level_5')
        markup = InlineKeyboardMarkup(row_width=5).add(level_1, level_2, level_3, level_4, level_5)
        await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", reply_markup=markup)


    @dp.callback_query_handler(lambda c: "Level" in c.data)
    async def callback_new_game(call):
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute("UPDATE id_n_dif_n_wins SET dif == ? WHERE id == ?;", (int(call.data[-1]) - 1,
                                                                              call.message.chat.id))
        connect.commit()
        connect.close()
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=None)
        markup = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("‚úèÔ∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='NewGame'))

        await call.message.answer('–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω ‚úÖ', reply_markup=markup)


    @dp.message_handler(commands=['game'])
    async def started_field(message):
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT id FROM users_info WHERE id = {message.chat.id}")
        data = cursor.fetchone()
        connect.commit()
        if data is None:
            cursor.execute(f"SELECT dif FROM id_n_dif_n_wins WHERE id = {message.chat.id}")

            dif_lev = cursor.fetchone()[0]
            sudoku = generator_sudoku(difficulty_level=(15 + dif_lev * 10))

            sudoku_drawer(sudoku, sudoku)

            with open(config.TABLE, 'rb') as file:
                msg = await bot.send_photo(message.chat.id, file)

            user_info = (message.chat.id, str(sudoku), str(sudoku), msg.message_id)
            cursor.execute("INSERT INTO users_info VALUES(?, ?, ?, ?);", user_info)
            connect.commit()
        else:
            item1 = InlineKeyboardButton("–¥–∞", callback_data='game_True')
            item2 = InlineKeyboardButton("–Ω–µ—Ç", callback_data='game_False')
            markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
            await message.answer("—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=markup)
        connect.close()


    @dp.callback_query_handler(lambda c: c.data == "NewGame")
    async def callback_new_game(call):
        await started_field(call.message)
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=None)


    @dp.callback_query_handler(lambda c: "game" in c.data)
    async def callback_game(call):
        if call.data == 'game_True':
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()

            cursor.execute(f"SELECT dif FROM id_n_dif_n_wins WHERE id = {call.message.chat.id}")
            dif_lev = cursor.fetchone()[0]
            sudoku = generator_sudoku(difficulty_level=(15 + dif_lev * 10))

            sudoku_drawer(sudoku, sudoku)

            with open(config.TABLE, 'rb') as file:
                msg = await bot.send_photo(call.message.chat.id, file)

            cursor.execute("UPDATE users_info SET starter_sudoku == ?, user_tab == ?, last_message_id == ? "
                           "WHERE id == ?;", (str(sudoku), str(sudoku), msg.message_id, call.message.chat.id))
            connect.commit()
            connect.close()
        if call.data == 'game_False':
            await bot.send_message(call.message.chat.id, "–±—É–¥—å –æ—Å—Ç–æ—Ä–µ–∂–Ω–µ–µ")
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=None)


    @dp.message_handler(commands=['answer'])
    async def answer(message):
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT id FROM users_info WHERE id = {message.chat.id}")
        data = cursor.fetchone()
        connect.commit()
        connect.close()

        if data is None:
            item = InlineKeyboardButton("‚úèÔ∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='NewGame')
            markup = InlineKeyboardMarkup(row_width=1).add(item)
            await message.answer("–¢—ã –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É üò¢", reply_markup=markup)
        else:
            item1 = InlineKeyboardButton("–¥–∞", callback_data='answer_True')
            item2 = InlineKeyboardButton("–Ω–µ—Ç", callback_data='answer_False')
            markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
            await message.answer("—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç?", reply_markup=markup)


    @dp.callback_query_handler(lambda c: "answer" in c.data)
    async def callback_answer(call):
        if call.data == 'answer_True':
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute(f"SELECT starter_sudoku, last_message_id FROM users_info WHERE id = {call.message.chat.id}")
            user_info = cursor.fetchone()
            connect.commit()

            starter_tab, last_message_id = eval(user_info[0]), user_info[1]
            sudoku_drawer(sudoku_solver(starter_tab), starter_tab)
            with open(config.TABLE, 'rb') as file:
                await bot.send_photo(call.message.chat.id, file)

            cursor.execute(f"DELETE FROM users_info WHERE id = {call.message.chat.id}")
            connect.commit()
            connect.close()
        if call.data == 'answer_False':
            await bot.send_message(call.message.chat.id, "—Ö–æ—Ä–æ—à–æ —á—Ç–æ —è —Å–ø—Ä–æ—Å–∏–ª")
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=None)


    @dp.message_handler(commands=['clear'])
    async def clear_field(message):
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT id FROM users_info WHERE id = {message.chat.id}")
        data = cursor.fetchone()
        connect.commit()
        connect.close()

        if data is None:
            item = InlineKeyboardButton("‚úèÔ∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='NewGame')
            markup = InlineKeyboardMarkup(row_width=1).add(item)
            await message.answer("–¢—ã –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É", reply_markup=markup)
        else:
            item1 = InlineKeyboardButton("–¥–∞", callback_data='clear_True')
            item2 = InlineKeyboardButton("–Ω–µ—Ç", callback_data='clear_False')
            markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
            await message.answer("—Ö–æ—á–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ?", reply_markup=markup)


    @dp.callback_query_handler(lambda c: "clear" in c.data)
    async def callback_clear(call):
        if call.data == 'clear_True':
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute(f"SELECT starter_sudoku FROM users_info WHERE id = {call.message.chat.id}")
            starter_tab = eval(cursor.fetchone()[0])
            connect.commit()

            sudoku_drawer(starter_tab, starter_tab)
            with open(config.TABLE, 'rb') as file:
                await bot.send_photo(call.message.chat.id, file)

            cursor.execute("UPDATE users_info SET user_tab == ? WHERE id == ?;", (str(starter_tab),
                                                                                  call.message.chat.id))
            connect.commit()
            connect.close()
        if call.data == 'clear_False':
            await bot.send_message(call.message.chat.id, "—Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–π")
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=None)


    @dp.message_handler(content_types=['text'])
    async def tab_change(message):
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT starter_sudoku, user_tab, last_message_id FROM users_info WHERE id = {message.chat.id}")
        user_info = cursor.fetchone()
        connect.commit()
        if user_info is not None:
            starter_tab, sudoku, last_message_id = eval(user_info[0]), eval(user_info[1]), user_info[2]
            text = message.text
            if (len(text) == 4) and (text[0] in ascii_letters) and text[1].isdigit() and (text[2] == ' ') \
                    and text[3].isdigit():
                column = ord(text[0].lower()) - 97
                row = int(text[1]) - 1
                num = int(text[3])
                if starter_tab[row][column] != 0:
                    item1 = InlineKeyboardButton('–¥–∞', callback_data='deception_True')
                    item2 = InlineKeyboardButton("–Ω–µ—Ç", callback_data='deception_False')
                    markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
                    await message.answer("—Ö–æ—á–µ—à—å –º–µ–Ω—è –Ω–∞–¥—É—Ä–∏—Ç—å?", reply_markup=markup)
                else:
                    sudoku[row][column] = num
                    sudoku_drawer(sudoku, starter_tab)
                    with open(config.TABLE, 'rb') as file:
                        msg = await bot.send_photo(message.chat.id, file)
                    try:
                        await bot.delete_message(message.chat.id, last_message_id)
                    except MessageCantBeDeleted:
                        pass
                    cursor.execute("UPDATE users_info SET user_tab == ?, last_message_id == ? WHERE id == ?",
                                   (str(sudoku), msg.message_id, message.chat.id))
                    connect.commit()
                    if sudoku == sudoku_solver(starter_tab):
                        cursor.execute(f"SELECT dif, wins FROM id_n_dif_n_wins WHERE id = {message.chat.id}")
                        dif, wins = cursor.fetchone()
                        cursor.execute("UPDATE id_n_dif_n_wins SET wins == ? WHERE id == ?;",
                                       (wins + dif + 1, message.chat.id))

                        markup = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("‚úèÔ∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É",
                                                                                            callback_data='NewGame'))
                        await message.answer('*–ü–æ–±–µ–¥–∞!*', reply_markup=markup, parse_mode='Markdown')
                        cursor.execute(f"DELETE FROM users_info WHERE id = {message.chat.id}")
                        connect.commit()
            connect.close()


    @dp.callback_query_handler(lambda c: "deception" in c.data)
    async def callback_deception(call):
        if call.data == 'deception_True':
            await bot.send_message(call.message.chat.id, "—É —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç")
        if call.data == 'deception_False':
            await bot.send_message(call.message.chat.id, "—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å, —Å–æ –≤—Å–µ–º–∏ –±—ã–≤–∞–µ—Ç")
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=None)


    async def set_commands(dp):
        await bot.set_my_commands([types.BotCommand("/start", "–Ω–∞—á–∞—Ç—å"), types.BotCommand("/game", "–Ω–æ–≤–∞—è –∏–≥—Ä–∞"),
                                   types.BotCommand("/change_level", "–ø–æ–º–µ–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å"),
                                   types.BotCommand("/clear", "–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ"), types.BotCommand("/answer", "—Ä–µ—à–µ–Ω–∏–µ"),
                                   types.BotCommand("/rules", "–ø—Ä–∞–≤–∏–ª–∞")])
except Exception as ex:
    print(ex)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=set_commands)
